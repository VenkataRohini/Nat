(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["StyleProperties"] = factory();
	else
		root["StyleProperties"] = factory();
})(this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.getStyleProperty = getStyleProperty;
	exports.getStyleProperties = getStyleProperties;

	var _changeCase = __webpack_require__(1);

	var _parsePropertyValue = __webpack_require__(2);

	var _parsePropertyValue2 = _interopRequireDefault(_parsePropertyValue);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	/**
	 * @typedef {Object} StyleProperty
	 * @property {string} unit - unit of the property, e.g. px, rgb
	 * @property {string|number} value - value of the property
	 * @property {string} output - valid string representation of value and unit
	 *
	 * @example <caption>Simple property.</caption>
	 * {
	 *   unit: 'px',
	 *   value: 100,
	 *   output: '100px'
	 * }
	 *
	 * @example <caption>Color property.</caption>
	 * {
	 *   unit: 'rgb',
	 *   value: [255, 255, 255],
	 *   output: '#ffffff'
	 * }
	 */

	/**
	 * Attempts to fix the element when using Webcomponents with ShadowDOMPolyfill. It returns either original element or wrapped element, depending on whether the polyfill replaced the original `getComputedStyle` method or not.
	 * This is madness and no sane person should ever do hacks like this. ShadowDOMPolyfill sucks donkey balls!
	 * @param {Object|HTMLElement} element
	 * @returns {Object|HTMLElement}
	 */
	function fixWebcomponentsElement(element) {
	  if (typeof window.ShadowDOMPolyfill !== 'undefined') {

	    var is_native = document.defaultView.getComputedStyle.toString().indexOf('[native code]') !== -1;

	    // Can't check if element is instance of HTMLElement, because the polyfill
	    // hijacks this. Only reliable way of checking if it is wrapped I found
	    // is using this ugly ass property.
	    var is_wrapped = typeof element.__impl4cf1e782hg__ !== 'undefined';

	    if (is_native && is_wrapped) {
	      element = window.ShadowDOMPolyfill.unwrap(element);
	    }

	    if (!is_native && !is_wrapped) {
	      element = window.ShadowDOMPolyfill.wrap(element);
	    }
	  }

	  return element;
	}

	/**
	 * Returns information about unit and value of given property for given element.
	 * @param {HTMLElement} element
	 * @param {string} property - Name of the property. You can use either camelCase (e.g. zIndex) or kebab-case (e.g. z-index).
	 * @returns {StyleProperty}
	 *
	 * @example
	 * var element_width = getStyleProperty(my_element, 'width');
	 * // returns {unit: 'px', value: 100, output: '100px'}
	 */
	function getStyleProperty(element, property) {
	  property = (0, _changeCase.toKebabCase)(property);
	  element = fixWebcomponentsElement(element);
	  var value = document.defaultView.getComputedStyle(element, null).getPropertyValue(property);
	  return (0, _parsePropertyValue2.default)(value);
	}

	/**
	 * Returns information about multiple properties of given element.
	 * @param {HTMLElement} element
	 * @param {Array|string} properties - List of properties. Single property (string) will be converted to an array.
	 * @returns {Object} - Keys of the returned objects are property names, values are objects containing information about given property.
	 *
	 * @example
	 * var element_size = getStyleProperties(my_element, ['width', 'height']);
	 * // returns
	 * // {
	 * //   width: {unit: 'px', value: 100, output: '100px'},
	 * //   height: {unit: 'px', value: 100, output: '100px'}
	 * // }
	 */
	function getStyleProperties(element) {
	  var properties = arguments.length <= 1 || arguments[1] === undefined ? [] : arguments[1];

	  if (typeof properties === 'string') {
	    properties = [properties];
	  }

	  var result = {};

	  properties.forEach(function (property) {
	    result[property] = getStyleProperty(element, property);
	  });

	  return result;
	}

/***/ },
/* 1 */
/***/ function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.toCamelCase = toCamelCase;
	exports.toKebabCase = toKebabCase;
	var delimiters = [' ', '-', '_'];

	function toCamelCase() {
	  var input = arguments.length <= 0 || arguments[0] === undefined ? '' : arguments[0];

	  var characters = input.split('');
	  var result = [];

	  var character = void 0;
	  while (character = characters.shift()) {
	    if (delimiters.indexOf(character) !== -1) {
	      if (character = characters.shift()) {
	        character = character.toUpperCase();
	      }
	    }
	    result.push(character);
	  }

	  return result.join('');
	}

	function toKebabCase() {
	  var input = arguments.length <= 0 || arguments[0] === undefined ? '' : arguments[0];

	  var characters = input.split('');
	  var result = [];

	  characters.forEach(function (character) {
	    var lowercase_character = character.toLowerCase();
	    if (character !== lowercase_character) {
	      result.push('-', lowercase_character);
	    } else if (delimiters.indexOf(character) !== -1) {
	      result.push('-');
	    } else {
	      result.push(character);
	    }
	  });

	  return result.join('');
	}

/***/ },
/* 2 */
/***/ function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	exports.default = function (value) {
	  var result = re_color.test(value) ? parseColorProperty(value) : parseRegularProperty(value);
	  result.original = value;
	  return result;
	};

	var re_color = /^rgb\((\d+),\s?(\d+),\s?(\d+)\)$/;
	var re_prop = /^(-?\d*\.?\d*)(.*)$/;

	// converts number in base 10 to base 16, adds padding zero if needed
	function convertColorComponent(input) {
	  var result = input.toString(16);
	  if (result.length < 2) {
	    result = '0' + result;
	  }
	  return result;
	}

	function parseColorProperty(value) {
	  var matches = value.match(re_color);
	  var result = {};

	  result.unit = 'rgb';

	  result.value = [parseInt(matches[1], 10), parseInt(matches[2], 10), parseInt(matches[3], 10)];

	  result.output = '#' + convertColorComponent(result.value[0]) + convertColorComponent(result.value[1]) + convertColorComponent(result.value[2]);

	  return result;
	}

	function parseRegularProperty(value) {
	  var result = {
	    unit: '',
	    value: null,
	    output: 'auto'
	  };

	  if (value !== 'auto') {
	    var matches = value.match(re_prop);
	    result.value = parseFloat(matches[1]);
	    result.unit = matches[2];
	    result.output = result.value + result.unit;
	  }

	  return result;
	}

/***/ }
/******/ ])
});
;